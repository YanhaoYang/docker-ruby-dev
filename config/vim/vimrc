" vim:fdm=marker:fdl=0

runtime plugins

filetype on
filetype plugin indent on   " Automatically detect file types.
syntax on                   " syntax highlighting

let g:vim_json_syntax_conceal = 0

let g:neodark#use_256color = 1
let g:neodark#terminal_transparent = 1
colorscheme neodark

set encoding=utf-8

set wrap
set showbreak=...
set spell                       " spell checking on
set hidden                      " allow buffer switching without saving

set showmode                    " display the current mode

if has('cmdline_info')
  set ruler                   " show the ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
  set showcmd                 " show partial commands in status line and
endif

if has('statusline')
  set laststatus=2

  set statusline=%<%f\    " Filename
  set statusline+=%w%h%m%r " Options
  set statusline+=\ [%{&ff}/%Y]            " filetype
  set statusline+=%{fugitive#statusline()} "  Git Hotness
  "set statusline+=\ [%{getcwd()}]          " current dir
  set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

set backspace=indent,eol,start  " backspace for dummies
set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set showmatch                   " show matching brackets/parenthesis
set incsearch                   " find as you type search
set hlsearch                    " highlight search terms
set winminheight=0              " windows can be 0 line high
set ignorecase                  " case insensitive search
set smartcase                   " case sensitive when uc present
set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys wrap to
set scrolljump=5                " lines to scroll when cursor leaves screen
set scrolloff=3                 " minimum lines to keep above and below cursor
set foldenable                  " auto fold code
set foldmethod=indent
set foldcolumn=2
set foldlevel=1
set list
set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace

set wildmenu                    " show list instead of just completing
set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
set wildignore=*.o,*.obj,*~     "stuff to ignore when tab completing
set wildignore+=*.so,*.swp,*.zip

set autoindent                  " indent at the same level of the previous line
set shiftwidth=2                " use indents of 4 spaces
set expandtab                   " tabs are spaces, not tabs
set tabstop=2                   " an indentation every four columns
set softtabstop=2               " let backspace delete indent
set pastetoggle=<F8>            " pastetoggle (sane indentation on pastes)

set autowrite
augroup AutoWrite
  autocmd! BufLeave * :update
augroup END

highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn="80,100,".join(range(120,999),",")

" fix crontab: temp file must be edited in place
set backupskip=/tmp/*,/private/tmp/*

" Remove trailing whitespaces and ^M chars
autocmd BufWritePre * :%s/\s\+$//e

"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
  if &filetype !~ 'commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
      exe "normal! g`\""
      normal! zz
    endif
  end
endfunction

let mapleader = ','

" NerdTree {
map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
map <leader>e :NERDTree<CR>
nmap <leader>nt :NERDTreeFind<CR>
nnoremap <silent> <C-f> :NERDTreeFind<CR>

let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.DS_Store']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=0
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
" }

" FZF {
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nmap <leader>f :Files<CR>
nmap <leader>b :Buffers<CR>
nmap <leader>m :Marks<CR>
" }

map <C-q> :q<CR>
map <C-x> :wqa<CR>

function! InitializeDirectories()
  let separator = "."
  let parent = $HOME
  let prefix = '.vim'
  let dir_list = {
        \ 'backup': 'backupdir',
        \ 'views': 'viewdir',
        \ 'swap': 'directory' }

  if has('persistent_undo')
    let dir_list['undo'] = 'undodir'
  endif

  for [dirname, settingname] in items(dir_list)
    let directory = parent . '/' . prefix . dirname . "/"
    if exists("*mkdir")
      if !isdirectory(directory)
        call mkdir(directory)
      endif
    endif
    if !isdirectory(directory)
      echo "Warning: Unable to create backup directory: " . directory
      echo "Try: mkdir -p " . directory
    else
      let directory = substitute(directory, " ", "\\\\ ", "g")
      exec "set " . settingname . "=" . directory
    endif
  endfor
endfunction
call InitializeDirectories()

" tpope/vim-rails {
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1
" }

au BufNewFile,BufRead Gemfile*			set filetype=ruby
au BufNewFile,BufRead Gemfile*.lock			set filetype=

au BufNewFile,BufRead *.rdoc			set filetype=rdoc
au BufNewFile,BufRead *.textile   set filetype=textile
au BufNewFile,BufRead *.{md,mkdn,markdown} set filetype=markdown

nmap <Leader>pm :PreviewMarkdown<CR>
nmap <Leader>pt :PreviewTextile<CR>
nmap <Leader>pr :PreviewRdoc<CR>
nmap <Leader>ph :PreviewHtml<CR>

map <F9> :cn<CR>
map <F10> @a<CR>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

nnoremap gw :Ag <C-R><C-W><CR>
nnoremap gr :grep <cword> --ignore-dir public<CR>
nnoremap Gr :grep <cword> %:p:h/*<CR>
nnoremap gR :grep '\b<cword>\b'<CR>
nnoremap GR :grep '\b<cword>\b' %:p:h/*<CR>
nnoremap gs :%s/\<<C-r><C-w>\>/

nnoremap gb :Gblame<CR>
nnoremap gl :%!xmllint --format -<CR>
nnoremap gp :PreviewMarkdown<CR>

" https://github.com/wincent/clipper
nnoremap yc :call system('nc -N $HOST_IP 8377', @0)<CR>

" Allow to copy/paste between VIM instances {
"copy the current visual selection to ~/.vbuf
vmap <leader>y :w! ~/.share/.vbuf<cr>

"copy the current line to the buffer file if no visual selection
nmap <leader>y :.w! ~/.share/.vbuf<cr>

"paste the contents of the buffer file
nmap <leader>p :r ~/.share/.vbuf<cr>
" }

" turn off search highlighting (type <leader>n to de-select everything)
nmap <silent> <leader>n :silent :nohlsearch<cr>

" ripper-tags {
function! RipperTags()
  if executable("ripper-tags")
    call job_start('ripper-tags --tag-file=./tmp/tags --recursive --exclude=vendor --tag-relative=..')
  endif
endfunction

function! RipperTagsIfInProject()
  if filereadable("Gemfile")
    call RipperTags()
  endif
endfunction

" test current file; type :! to see output again
nmap <silent> <leader>td :!bundle exec rspec -fd %<CR>

nmap <silent> <leader>tt :silent call RipperTags()<CR>
" autocmd BufWritePost *.rb call RipperTagsIfInProject()
" }

" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
nmap <Leader>t= :Tabularize /=<CR>
vmap <Leader>t= :Tabularize /=<CR>
nmap <Leader>t: :Tabularize /:\zs<CR>
vmap <Leader>t: :Tabularize /:\zs<CR>

" coc.nvim {{{

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

let g:coc_snippet_next = '<tab>'

" }}}
